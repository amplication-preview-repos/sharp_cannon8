/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NonGuest as PrismaNonGuest } from "@prisma/client";

export class NonGuestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NonGuestCountArgs, "select">): Promise<number> {
    return this.prisma.nonGuest.count(args);
  }

  async nonGuests<T extends Prisma.NonGuestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NonGuestFindManyArgs>
  ): Promise<PrismaNonGuest[]> {
    return this.prisma.nonGuest.findMany<Prisma.NonGuestFindManyArgs>(args);
  }
  async nonGuest<T extends Prisma.NonGuestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NonGuestFindUniqueArgs>
  ): Promise<PrismaNonGuest | null> {
    return this.prisma.nonGuest.findUnique(args);
  }
  async createNonGuest<T extends Prisma.NonGuestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NonGuestCreateArgs>
  ): Promise<PrismaNonGuest> {
    return this.prisma.nonGuest.create<T>(args);
  }
  async updateNonGuest<T extends Prisma.NonGuestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NonGuestUpdateArgs>
  ): Promise<PrismaNonGuest> {
    return this.prisma.nonGuest.update<T>(args);
  }
  async deleteNonGuest<T extends Prisma.NonGuestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NonGuestDeleteArgs>
  ): Promise<PrismaNonGuest> {
    return this.prisma.nonGuest.delete(args);
  }
}
