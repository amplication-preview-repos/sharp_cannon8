/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NonGuestService } from "../nonGuest.service";
import { NonGuestCreateInput } from "./NonGuestCreateInput";
import { NonGuest } from "./NonGuest";
import { NonGuestFindManyArgs } from "./NonGuestFindManyArgs";
import { NonGuestWhereUniqueInput } from "./NonGuestWhereUniqueInput";
import { NonGuestUpdateInput } from "./NonGuestUpdateInput";

export class NonGuestControllerBase {
  constructor(protected readonly service: NonGuestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NonGuest })
  async createNonGuest(
    @common.Body() data: NonGuestCreateInput
  ): Promise<NonGuest> {
    return await this.service.createNonGuest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NonGuest] })
  @ApiNestedQuery(NonGuestFindManyArgs)
  async nonGuests(@common.Req() request: Request): Promise<NonGuest[]> {
    const args = plainToClass(NonGuestFindManyArgs, request.query);
    return this.service.nonGuests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NonGuest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async nonGuest(
    @common.Param() params: NonGuestWhereUniqueInput
  ): Promise<NonGuest | null> {
    const result = await this.service.nonGuest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NonGuest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNonGuest(
    @common.Param() params: NonGuestWhereUniqueInput,
    @common.Body() data: NonGuestUpdateInput
  ): Promise<NonGuest | null> {
    try {
      return await this.service.updateNonGuest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NonGuest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNonGuest(
    @common.Param() params: NonGuestWhereUniqueInput
  ): Promise<NonGuest | null> {
    try {
      return await this.service.deleteNonGuest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
