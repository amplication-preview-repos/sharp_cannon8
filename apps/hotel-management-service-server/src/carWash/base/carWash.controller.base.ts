/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CarWashService } from "../carWash.service";
import { CarWashCreateInput } from "./CarWashCreateInput";
import { CarWash } from "./CarWash";
import { CarWashFindManyArgs } from "./CarWashFindManyArgs";
import { CarWashWhereUniqueInput } from "./CarWashWhereUniqueInput";
import { CarWashUpdateInput } from "./CarWashUpdateInput";

export class CarWashControllerBase {
  constructor(protected readonly service: CarWashService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CarWash })
  async createCarWash(
    @common.Body() data: CarWashCreateInput
  ): Promise<CarWash> {
    return await this.service.createCarWash({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CarWash] })
  @ApiNestedQuery(CarWashFindManyArgs)
  async carWashes(@common.Req() request: Request): Promise<CarWash[]> {
    const args = plainToClass(CarWashFindManyArgs, request.query);
    return this.service.carWashes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CarWash })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async carWash(
    @common.Param() params: CarWashWhereUniqueInput
  ): Promise<CarWash | null> {
    const result = await this.service.carWash({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CarWash })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCarWash(
    @common.Param() params: CarWashWhereUniqueInput,
    @common.Body() data: CarWashUpdateInput
  ): Promise<CarWash | null> {
    try {
      return await this.service.updateCarWash({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CarWash })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCarWash(
    @common.Param() params: CarWashWhereUniqueInput
  ): Promise<CarWash | null> {
    try {
      return await this.service.deleteCarWash({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
